#!/usr/bin/env zsh
emulate -L zsh
setopt extendedglob
zmodload zsh/sched

# Get preferences from zstyle
local -a handler
local editor
zstyle -g handler :zle:evil-registers:handlers:$_evil_register yank
zstyle -g editor :zle:evil-registers:sync editor

# Let handlers override normal [[:alnum:]_] registers
if (( $#handler )); then
	zle .vi-set-buffer x
	local x
	x=$registers[x]
	zle .$WIDGET
	$handler <<< $registers[x]
	registers[x]=$x
	unset _evil_register
	return
fi

case $_evil_register in

''|[0-9_]) zle .$WIDGET ;;
[a-zA-Z]) # sync
	if ! typeset +f .evil-registers::remote-set >/dev/null; then
		case $editor in
		nvim*|neovim*|nvr)
			(( $+commands[nvr] )) &&
				.evil-registers::remote-set(){
					local MATCH MBEGIN MEND
					timeout -k 15 10 nvr -s --nostart --remote-expr \
					"setreg('$1', \"${2//(#m)[\\\"]/\\$MATCH}\")" >/dev/null
				}
			;;
		(|g)vim*)
			# parse version to detect server support
			[[ $(vim --version) = *+clientserver* ]] &&
				.evil-registers::remote-set(){
					local MATCH
					local -i MBEGIN MEND
					timeout -k 15 10 vim --servername "${VIMSERVER:=$editor}" --remote-expr \
					"setreg('$1', \"${2//(#m)[\\\"]/\\$MATCH}\")" >/dev/null
				}
			;;
		*)
			# no match found, do default zle and exit
			zle ".$WIDGET"
			unset _evil_register
			return
			;;
		esac

	fi
	# append or set remote
	local old
	if [[ $_evil_register = [A-Z] ]]; then
		zle .vi-set-buffer "${_evil_register:l}"
		old=$registers[${_evil_register:l}]
		zle ".$WIDGET"
	else zle ".$WIDGET"; fi
	# Use sched to execute without job control messages
	# sched splits the parameters
	sched +0 .evil-registers::remote-set "$_evil_register" "${(q)registers[${_evil_register:l}]}"
	registers[${_evil_register:l}]="$old${registers[${_evil_register:l}]}"
;;
*) zle ".$WIDGET" ;;

esac

unset _evil_register
