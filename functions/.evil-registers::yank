#!/usr/bin/env zsh
emulate -L zsh
setopt extendedglob
zmodload zsh/sched

local -a {,a,v}handler

# On first run, setup editor
if (($+functions[.evil-registers::setup-editor])); then
	.evil-registers::setup-editor
	unfunction .evil-registers::setup-editor
fi

# Get preferences from zstyle
zstyle -a :zle:evil-registers:${(q)_evil_register} yank   handler
zstyle -a :zle:evil-registers:${(q)_evil_register} yanka ahandler
zstyle -a :zle:evil-registers:${(q)_evil_register} yankv vhandler

# handle user registers without argument
if (( $#handler )); then
	zle .vi-set-buffer x
	local x
	x=$registers[x]
	zle .$WIDGET
	$handler <<< $registers[x]
	registers[x]=$x

# handle user registers with argument
elif (($#ahandler)); then

	# append or set remote
	local old new
	case $_evil_register in
	[A-Z]) # manually append
		zle .vi-set-buffer "${_evil_register:l}"
		old=$registers[${_evil_register:l}]
		;;
	[a-z0-9_]) ;;
	*)
		_evil_register=x
		new=:$registers[x] # overwrite
	esac
	zle .$WIDGET
	# Use sched to execute without job control messages
	# sched splits the parameters
	sched +0 $ahandler "$_evil_register" "${(q)registers[${_evil_register:l}]}"
	if (($#new)); then
		registers[x]=${new:1}
	else
		registers[${_evil_register:l}]="$old${registers[${_evil_register:l}]}"
	fi

# handle user registers from variable
elif (($#vhandler)) && [[ -v $vhandler ]]; then
	newcutbuffer="${(P)vhandler}"

# fallback to default behavior
else
	zle .$WIDGET
fi

unset _evil_register
